// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/api/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/api/interfaces.go -destination=./mocks/api/mocks.go
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	model "github.com/aube/gophermart/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockUserProvider is a mock of UserProvider interface.
type MockUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserProviderMockRecorder
	isgomock struct{}
}

// MockUserProviderMockRecorder is the mock recorder for MockUserProvider.
type MockUserProviderMockRecorder struct {
	mock *MockUserProvider
}

// NewMockUserProvider creates a new mock instance.
func NewMockUserProvider(ctrl *gomock.Controller) *MockUserProvider {
	mock := &MockUserProvider{ctrl: ctrl}
	mock.recorder = &MockUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserProvider) EXPECT() *MockUserProviderMockRecorder {
	return m.recorder
}

// Balance mocks base method.
func (m *MockUserProvider) Balance(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balance", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Balance indicates an expected call of Balance.
func (mr *MockUserProviderMockRecorder) Balance(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balance", reflect.TypeOf((*MockUserProvider)(nil).Balance), arg0, arg1)
}

// Login mocks base method.
func (m *MockUserProvider) Login(arg0 context.Context, arg1 *model.User) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockUserProviderMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserProvider)(nil).Login), arg0, arg1)
}

// Register mocks base method.
func (m *MockUserProvider) Register(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockUserProviderMockRecorder) Register(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserProvider)(nil).Register), arg0, arg1)
}

// MockActiveUserProvider is a mock of ActiveUserProvider interface.
type MockActiveUserProvider struct {
	ctrl     *gomock.Controller
	recorder *MockActiveUserProviderMockRecorder
	isgomock struct{}
}

// MockActiveUserProviderMockRecorder is the mock recorder for MockActiveUserProvider.
type MockActiveUserProviderMockRecorder struct {
	mock *MockActiveUserProvider
}

// NewMockActiveUserProvider creates a new mock instance.
func NewMockActiveUserProvider(ctrl *gomock.Controller) *MockActiveUserProvider {
	mock := &MockActiveUserProvider{ctrl: ctrl}
	mock.recorder = &MockActiveUserProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActiveUserProvider) EXPECT() *MockActiveUserProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockActiveUserProvider) Get(arg0 context.Context, arg1 string) (*model.User, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockActiveUserProviderMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockActiveUserProvider)(nil).Get), arg0, arg1)
}

// Set mocks base method.
func (m *MockActiveUserProvider) Set(arg0 context.Context, arg1 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockActiveUserProviderMockRecorder) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockActiveUserProvider)(nil).Set), arg0, arg1)
}

// MockBillingProvider is a mock of BillingProvider interface.
type MockBillingProvider struct {
	ctrl     *gomock.Controller
	recorder *MockBillingProviderMockRecorder
	isgomock struct{}
}

// MockBillingProviderMockRecorder is the mock recorder for MockBillingProvider.
type MockBillingProviderMockRecorder struct {
	mock *MockBillingProvider
}

// NewMockBillingProvider creates a new mock instance.
func NewMockBillingProvider(ctrl *gomock.Controller) *MockBillingProvider {
	mock := &MockBillingProvider{ctrl: ctrl}
	mock.recorder = &MockBillingProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingProvider) EXPECT() *MockBillingProviderMockRecorder {
	return m.recorder
}

// BalanceWithdraw mocks base method.
func (m *MockBillingProvider) BalanceWithdraw(arg0 context.Context, arg1 *model.Withdraw, arg2 *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceWithdraw", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BalanceWithdraw indicates an expected call of BalanceWithdraw.
func (mr *MockBillingProviderMockRecorder) BalanceWithdraw(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceWithdraw", reflect.TypeOf((*MockBillingProvider)(nil).BalanceWithdraw), arg0, arg1, arg2)
}

// Withdrawals mocks base method.
func (m *MockBillingProvider) Withdrawals(arg0 context.Context, arg1 int) ([]model.Withdraw, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdrawals", arg0, arg1)
	ret0, _ := ret[0].([]model.Withdraw)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Withdrawals indicates an expected call of Withdrawals.
func (mr *MockBillingProviderMockRecorder) Withdrawals(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdrawals", reflect.TypeOf((*MockBillingProvider)(nil).Withdrawals), arg0, arg1)
}

// MockOrderProvider is a mock of OrderProvider interface.
type MockOrderProvider struct {
	ctrl     *gomock.Controller
	recorder *MockOrderProviderMockRecorder
	isgomock struct{}
}

// MockOrderProviderMockRecorder is the mock recorder for MockOrderProvider.
type MockOrderProviderMockRecorder struct {
	mock *MockOrderProvider
}

// NewMockOrderProvider creates a new mock instance.
func NewMockOrderProvider(ctrl *gomock.Controller) *MockOrderProvider {
	mock := &MockOrderProvider{ctrl: ctrl}
	mock.recorder = &MockOrderProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderProvider) EXPECT() *MockOrderProviderMockRecorder {
	return m.recorder
}

// GetNewOrdersID mocks base method.
func (m *MockOrderProvider) GetNewOrdersID() ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewOrdersID")
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewOrdersID indicates an expected call of GetNewOrdersID.
func (mr *MockOrderProviderMockRecorder) GetNewOrdersID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewOrdersID", reflect.TypeOf((*MockOrderProvider)(nil).GetNewOrdersID))
}

// Orders mocks base method.
func (m *MockOrderProvider) Orders(arg0 context.Context, arg1 int) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Orders", arg0, arg1)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Orders indicates an expected call of Orders.
func (mr *MockOrderProviderMockRecorder) Orders(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Orders", reflect.TypeOf((*MockOrderProvider)(nil).Orders), arg0, arg1)
}

// SetAccrual mocks base method.
func (m *MockOrderProvider) SetAccrual(arg0, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccrual", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccrual indicates an expected call of SetAccrual.
func (mr *MockOrderProviderMockRecorder) SetAccrual(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccrual", reflect.TypeOf((*MockOrderProvider)(nil).SetAccrual), arg0, arg1)
}

// SetStatus mocks base method.
func (m *MockOrderProvider) SetStatus(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockOrderProviderMockRecorder) SetStatus(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockOrderProvider)(nil).SetStatus), arg0, arg1)
}

// UploadOrders mocks base method.
func (m *MockOrderProvider) UploadOrders(arg0 context.Context, arg1 *model.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadOrders", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadOrders indicates an expected call of UploadOrders.
func (mr *MockOrderProviderMockRecorder) UploadOrders(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadOrders", reflect.TypeOf((*MockOrderProvider)(nil).UploadOrders), arg0, arg1)
}

// MockAccrualService is a mock of AccrualService interface.
type MockAccrualService struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualServiceMockRecorder
	isgomock struct{}
}

// MockAccrualServiceMockRecorder is the mock recorder for MockAccrualService.
type MockAccrualServiceMockRecorder struct {
	mock *MockAccrualService
}

// NewMockAccrualService creates a new mock instance.
func NewMockAccrualService(ctrl *gomock.Controller) *MockAccrualService {
	mock := &MockAccrualService{ctrl: ctrl}
	mock.recorder = &MockAccrualServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualService) EXPECT() *MockAccrualServiceMockRecorder {
	return m.recorder
}

// AddWork mocks base method.
func (m *MockAccrualService) AddWork(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddWork", arg0)
}

// AddWork indicates an expected call of AddWork.
func (mr *MockAccrualServiceMockRecorder) AddWork(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWork", reflect.TypeOf((*MockAccrualService)(nil).AddWork), arg0)
}
